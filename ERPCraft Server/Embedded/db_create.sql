SET statement_timeout = 0; SET lock_timeout = 0; SET idle_in_transaction_session_timeout = 0; SET client_encoding = 'UTF8'; SET standard_conforming_strings = on; SELECT pg_catalog.set_config('search_path', '', false); SET check_function_bodies = false; SET xmloption = content; SET client_min_messages = warning; SET row_security = off; CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public; CREATE FUNCTION public.act_robot_inv_actualizar() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN IF OLD.cant != NEW.cant THEN UPDATE robots SET num_items = num_items + (NEW.cant - OLD.cant) WHERE id = NEW.rob; END IF; IF (NEW.cant > 0) AND (OLD.cant = 0) THEN UPDATE robots SET num_stacks = num_stacks + 1 WHERE id = NEW.rob; ELSEIF (NEW.cant = 0) AND (OLD.cant > 0) THEN UPDATE robots SET num_stacks = num_stacks - 1 WHERE id = NEW.rob; END IF; RETURN NEW; END; $$; CREATE FUNCTION public.act_robot_inv_insertar() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN UPDATE robots SET num_items = num_items + NEW.cant WHERE id = NEW.rob; IF (NEW.cant > 0) THEN UPDATE robots SET num_stacks = num_stacks + 1 WHERE id = NEW.rob; END IF; RETURN NEW; END; $$; CREATE FUNCTION public.alt_drone_gen_drn_inv() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN IF (NEW.num_slots > 0) THEN FOR i IN 1..NEW.num_slots LOOP INSERT INTO drn_inventario ("drn", "id", "num_slot", "cant", "art") VALUES (NEW.id, i, i, 0, NULL); END LOOP; END IF; RETURN NEW; END; $$; CREATE FUNCTION public.alt_robot_gen_rob_inv() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN IF (NEW.num_slots > 0) THEN FOR i IN 1..NEW.num_slots LOOP INSERT INTO rob_inventario ("rob", "id", "num_slot", "cant", "art") VALUES (NEW.id, i, i, 0, NULL); END LOOP; END IF; RETURN NEW; END; $$; CREATE FUNCTION public.alt_robot_next_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(robots.id) END AS id FROM robots) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.drone_post_update() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.date_upd = CURRENT_TIMESTAMP(3); RETURN NEW; END; $$; CREATE FUNCTION public.mod_drone_gen_drn_inv() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN IF (NEW.num_slots != OLD.num_slots) THEN IF (NEW.num_slots > OLD.num_slots) THEN FOR i IN (OLD.num_slots + 1)..NEW.num_slots LOOP INSERT INTO drn_inventario ("drn", "id", "num_slot", "cant", "art") VALUES (NEW.id, i, i, 0, NULL); END LOOP; ELSE DELETE FROM drn_inventario WHERE rob = NEW.id AND num_slot > NEW.num_slots; END IF; END IF; RETURN NEW; END; $$; CREATE FUNCTION public.mod_robot_gen_rob_inv() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN IF (NEW.num_slots != OLD.num_slots) THEN IF (NEW.num_slots > OLD.num_slots) THEN FOR i IN (OLD.num_slots + 1)..NEW.num_slots LOOP INSERT INTO rob_inventario ("rob", "id", "num_slot", "cant", "art") VALUES (NEW.id, i, i, 0, NULL); END LOOP; ELSE DELETE FROM rob_inventario WHERE rob = NEW.id AND num_slot > NEW.num_slots; END IF; END IF; RETURN NEW; END; $$; CREATE FUNCTION public.robot_post_update() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.date_upd = CURRENT_TIMESTAMP(3); RETURN NEW; END; $$; CREATE FUNCTION public.set_alm_inv_notificacion_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(alm_inv_notificacion.id) END AS id FROM alm_inv_notificacion WHERE "alm" = NEW.alm) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_alm_inventario_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(alm_inventario.id) END AS id FROM alm_inventario WHERE "alm" = NEW.alm) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_almacenes_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(almacenes.id) END AS id FROM almacenes) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_api_key_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(api_key.id) END AS id FROM api_key) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_articulos_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(articulos.id) END AS id FROM articulos) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_bat_hist_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(bat_historial.id) END AS id FROM bat_historial WHERE "red_ele" = NEW.red_ele AND "bat" = NEW.bat) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_bat_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(bat.id) END AS id FROM bat WHERE "red_ele" = NEW.red_ele) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_config_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(config.id) END AS id FROM config) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_drn_gps_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(drn_gps.id) END AS id FROM drn_gps WHERE "drn" = NEW.drn) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_drn_inventario_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(drn_inventario.id) END AS id FROM drn_inventario WHERE "drn" = NEW.drn) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_drn_log_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(drn_logs.id) END AS id FROM drn_logs WHERE "drn" = NEW.drn) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_drones_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(drones.id) END AS id FROM drones) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_gen_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(gen.id) END AS id FROM gen WHERE "red_ele" = NEW.red_ele) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_mov_inventario_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(mov_inventario.id) END AS id FROM mov_inventario WHERE "alm" = NEW.alm) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_ord_min_inventario_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(ord_min_inventario.id) END AS id FROM ord_min_inventario WHERE "ord_min" = NEW.ord_min) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_ordenes_minado_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(ordenes_minado.id) END AS id FROM ordenes_minado) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_redes_electricas_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(redes_electricas.id) END AS id FROM redes_electricas) + 1; RETURN NEW; END; $$; CREATE FUNCTION public.set_usuarios_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(usuarios.id) END AS id FROM usuarios) + 1; RETURN NEW; END; $$; SET default_tablespace = ''; SET default_table_access_method = heap; CREATE TABLE public.alm_inv_notificacion ( alm smallint NOT NULL, id smallint NOT NULL, name character varying(50) NOT NULL, art smallint NOT NULL, modo "char" NOT NULL, cantidad integer NOT NULL ); CREATE TABLE public.alm_inventario ( alm smallint NOT NULL, id smallint NOT NULL, art smallint NOT NULL, cant integer DEFAULT 0 NOT NULL ); CREATE TABLE public.almacenes ( id smallint NOT NULL, name character varying(50) NOT NULL, dsc text DEFAULT ''::text NOT NULL, slots smallint DEFAULT 0 NOT NULL, items integer DEFAULT 0 NOT NULL, off boolean NOT NULL, uuid uuid NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, date_inv_upd timestamp without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL ); CREATE TABLE public.api_key ( id smallint NOT NULL, name character varying(40) NOT NULL, uuid uuid NOT NULL, ultima_con timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL ); CREATE TABLE public.articulos ( id smallint NOT NULL, name character varying(50) NOT NULL, mine_id character varying(50) NOT NULL, cant integer DEFAULT 0 NOT NULL, dsc text DEFAULT ''::text NOT NULL, img bytea, img_size smallint DEFAULT 0 NOT NULL ); CREATE TABLE public.bat ( id smallint NOT NULL, red_ele smallint NOT NULL, name character varying(50) NOT NULL, uuid uuid NOT NULL, cap_ele bigint NOT NULL, carga_act bigint NOT NULL, dsc text DEFAULT ''::text NOT NULL, tipo "char" DEFAULT 'O'::"char" NOT NULL, notif boolean DEFAULT false NOT NULL, notif_carga bigint DEFAULT 0 NOT NULL ); CREATE TABLE public.bat_historial ( red_ele smallint NOT NULL, bat smallint NOT NULL, id bigint NOT NULL, tim timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, carga_act bigint NOT NULL ); CREATE TABLE public.config ( id smallint NOT NULL, name character varying(50) NOT NULL, act boolean NOT NULL, lim_rob_gps boolean NOT NULL, dias_rob_gps smallint NOT NULL, lim_robot_log boolean NOT NULL, dias_rob_log smallint NOT NULL, lim_drn_gps boolean NOT NULL, dias_drn_gps smallint NOT NULL, lim_drn_log boolean NOT NULL, dias_drn_log smallint NOT NULL, lim_bat_hist boolean NOT NULL, horas_bat_hist smallint NOT NULL, vacuum_lim boolean NOT NULL, reindex_lim boolean NOT NULL, ping_int smallint DEFAULT 0 NOT NULL, timeout smallint DEFAULT 0 NOT NULL, web_port integer DEFAULT 32324 NOT NULL, oc_port integer DEFAULT 32325 NOT NULL, hash_rounds integer DEFAULT 5000 NOT NULL, ver smallint DEFAULT 2 NOT NULL, lim_notif boolean DEFAULT true NOT NULL, horas_notif smallint DEFAULT 48 NOT NULL ); CREATE TABLE public.drn_gps ( drn smallint NOT NULL, id timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, pos_x smallint NOT NULL, pos_y smallint NOT NULL, pos_z smallint NOT NULL ); CREATE TABLE public.drn_inventario ( drn smallint NOT NULL, id bigint NOT NULL, num_slot smallint NOT NULL, cant smallint NOT NULL, art smallint ); CREATE TABLE public.drn_logs ( drn smallint NOT NULL, id timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, titulo character varying(50) NOT NULL, msg text DEFAULT ''::text NOT NULL ); CREATE TABLE public.drones ( id smallint NOT NULL, name character varying(50) NOT NULL, uuid uuid NOT NULL, num_slots smallint DEFAULT 0 NOT NULL, num_stacks smallint DEFAULT 0 NOT NULL, num_items smallint DEFAULT 0 NOT NULL, estado "char" DEFAULT 'F'::"char" NOT NULL, total_energia integer DEFAULT 20500 NOT NULL, energia_actual integer DEFAULT 0 NOT NULL, fecha_con timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, fecha_descon timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, dsc text DEFAULT ''::text NOT NULL, upgrade_gps boolean DEFAULT false NOT NULL, pos_x smallint DEFAULT 0 NOT NULL, pos_y smallint DEFAULT 0 NOT NULL, pos_z smallint DEFAULT 0 NOT NULL, upgrade_gen boolean DEFAULT false NOT NULL, items_gen smallint DEFAULT 0 NOT NULL, complejidad smallint DEFAULT 0 NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, date_upd timestamp without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, off boolean DEFAULT false NOT NULL, off_pos_x smallint DEFAULT 0 NOT NULL, off_pos_y smallint DEFAULT 0 NOT NULL, off_pos_z smallint DEFAULT 0 NOT NULL, tier smallint DEFAULT 1 NOT NULL, notif_con boolean DEFAULT false NOT NULL, notif_descon boolean DEFAULT false NOT NULL, notif_bat_baj boolean DEFAULT false NOT NULL ); CREATE TABLE public.gen ( red_ele smallint NOT NULL, id smallint NOT NULL, name character varying(50) NOT NULL, uuid uuid NOT NULL, eu_t integer DEFAULT 0 NOT NULL, act boolean DEFAULT false NOT NULL, tipo "char" DEFAULT 'G'::"char" NOT NULL, dsc text DEFAULT ''::text NOT NULL, notif boolean DEFAULT false NOT NULL ); CREATE TABLE public.mapa ( pos_x smallint NOT NULL, pos_y smallint NOT NULL, pos_z smallint NOT NULL, art smallint ); CREATE TABLE public.mov_inventario ( alm smallint NOT NULL, id bigint NOT NULL, art smallint NOT NULL, cant integer DEFAULT 0 NOT NULL, origen "char" DEFAULT 'A'::"char" NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, dsc text DEFAULT ''::text NOT NULL ); CREATE TABLE public.notificaciones ( id timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, name character varying(50) NOT NULL, dsc character varying(250) NOT NULL, leido boolean DEFAULT false NOT NULL, origen smallint DEFAULT 0 NOT NULL ); CREATE TABLE public.ord_min_inventario ( ord_min integer NOT NULL, id smallint NOT NULL, art smallint NOT NULL, cant smallint NOT NULL ); CREATE TABLE public.ordenes_minado ( id integer NOT NULL, name character varying(50) NOT NULL, size smallint NOT NULL, rob smallint, pos_x smallint DEFAULT 0 NOT NULL, pos_y smallint DEFAULT 0 NOT NULL, pos_z smallint DEFAULT 0 NOT NULL, gps_x smallint NOT NULL, gps_y smallint NOT NULL, gps_z smallint NOT NULL, num_items integer DEFAULT 0 NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, date_upd timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, date_inicio timestamp(3) without time zone, date_fin timestamp(3) without time zone, dsc text DEFAULT ''::text NOT NULL, estado "char" DEFAULT 'Q'::"char" NOT NULL, recarga_unidad "char" DEFAULT '%'::"char" NOT NULL, energia_recarga smallint DEFAULT 0 NOT NULL, modo_minado "char" DEFAULT 'O'::"char" NOT NULL, pos_f smallint DEFAULT 0 NOT NULL, shutdown boolean DEFAULT false NOT NULL, notif boolean DEFAULT false NOT NULL ); CREATE TABLE public.redes_electricas ( id smallint NOT NULL, name character varying(50) NOT NULL, cap_ele bigint DEFAULT 0 NOT NULL, carga_act bigint DEFAULT 0 NOT NULL, dsc text DEFAULT ''::text NOT NULL ); CREATE TABLE public.rob_gps ( rob smallint NOT NULL, id timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, pos_x smallint NOT NULL, pos_y smallint NOT NULL, pos_z smallint NOT NULL ); CREATE TABLE public.rob_inventario ( rob smallint NOT NULL, id smallint NOT NULL, num_slot smallint NOT NULL, cant smallint NOT NULL, art smallint ); CREATE TABLE public.rob_logs ( rob smallint NOT NULL, id timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, titulo character varying(50) NOT NULL, msg text DEFAULT ''::text NOT NULL ); CREATE TABLE public.robots ( id smallint NOT NULL, name character varying(50) NOT NULL, uuid uuid NOT NULL, tier smallint DEFAULT 1 NOT NULL, num_slots smallint DEFAULT 16 NOT NULL, num_stacks smallint DEFAULT 0 NOT NULL, num_items smallint DEFAULT 0 NOT NULL, estado character(1) DEFAULT 'F'::bpchar NOT NULL, total_energia integer DEFAULT 20500 NOT NULL, energia_actual integer DEFAULT 0 NOT NULL, upgrade_gen boolean DEFAULT false NOT NULL, items_gen smallint DEFAULT 0 NOT NULL, fecha_con timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, fecha_descon timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, dsc text DEFAULT ''::text NOT NULL, upgrade_gps boolean DEFAULT false NOT NULL, pos_x smallint DEFAULT 0 NOT NULL, pos_y smallint DEFAULT 0 NOT NULL, pos_z smallint DEFAULT 0 NOT NULL, complejidad smallint DEFAULT 0 NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, date_upd timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, off boolean DEFAULT false NOT NULL, off_pos_x smallint DEFAULT 0 NOT NULL, off_pos_y smallint DEFAULT 0 NOT NULL, off_pos_z smallint DEFAULT 0 NOT NULL, ord_min integer, notif_con boolean DEFAULT false NOT NULL, notif_descon boolean DEFAULT false NOT NULL, notif_bat_baj boolean DEFAULT false NOT NULL ); CREATE TABLE public.servers ( uuid uuid NOT NULL, name character varying(50) NOT NULL, dsc text DEFAULT ''::text NOT NULL, online boolean DEFAULT false NOT NULL, ultima_con timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, autoreg boolean DEFAULT false NOT NULL, pwd character(128) DEFAULT ''::bpchar NOT NULL, salt character(30) DEFAULT ''::bpchar NOT NULL, iteraciones integer DEFAULT 0 NOT NULL, notif_on boolean DEFAULT false NOT NULL, notif_off boolean DEFAULT false NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL ); CREATE TABLE public.usuarios ( id smallint NOT NULL, name character varying(40) NOT NULL, pwd character(128) NOT NULL, salt character(30) NOT NULL, iteraciones integer NOT NULL, ultima_con timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, dsc text DEFAULT ''::text NOT NULL, off boolean DEFAULT false NOT NULL ); ALTER TABLE ONLY public.alm_inv_notificacion ADD CONSTRAINT alm_inv_notificacion_pkey PRIMARY KEY (alm, id); ALTER TABLE ONLY public.alm_inventario ADD CONSTRAINT alm_inventario_pkey PRIMARY KEY (alm, id); ALTER TABLE ONLY public.almacenes ADD CONSTRAINT almacenes_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.api_key ADD CONSTRAINT api_key_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.articulos ADD CONSTRAINT articulos_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.bat_historial ADD CONSTRAINT bat_historial_pkey PRIMARY KEY (red_ele, bat, id); ALTER TABLE ONLY public.bat ADD CONSTRAINT bat_pkey PRIMARY KEY (red_ele, id); ALTER TABLE ONLY public.config ADD CONSTRAINT config_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.drn_gps ADD CONSTRAINT drn_gps_pkey PRIMARY KEY (drn, id); ALTER TABLE ONLY public.drn_inventario ADD CONSTRAINT drn_inventario_pkey PRIMARY KEY (drn, id); ALTER TABLE ONLY public.drn_logs ADD CONSTRAINT drn_logs_pkey PRIMARY KEY (drn, id); ALTER TABLE ONLY public.drones ADD CONSTRAINT drones_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.gen ADD CONSTRAINT gen_pkey PRIMARY KEY (red_ele, id); ALTER TABLE ONLY public.mapa ADD CONSTRAINT mapa_pkey PRIMARY KEY (pos_x, pos_y, pos_z); ALTER TABLE ONLY public.mov_inventario ADD CONSTRAINT movimientos_inventario_pkey PRIMARY KEY (alm, id); ALTER TABLE ONLY public.notificaciones ADD CONSTRAINT notificaciones_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.ord_min_inventario ADD CONSTRAINT ord_min_inventario_pkey PRIMARY KEY (ord_min, id); ALTER TABLE ONLY public.ordenes_minado ADD CONSTRAINT ordenes_minado_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.redes_electricas ADD CONSTRAINT redes_electricas_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.rob_logs ADD CONSTRAINT "rob logs_pkey" PRIMARY KEY (rob, id); ALTER TABLE ONLY public.rob_gps ADD CONSTRAINT rob_gps_pkey PRIMARY KEY (rob, id); ALTER TABLE ONLY public.rob_inventario ADD CONSTRAINT rob_inventario_pkey PRIMARY KEY (rob, id); ALTER TABLE ONLY public.robots ADD CONSTRAINT robots_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.servers ADD CONSTRAINT servers_pkey PRIMARY KEY (uuid); ALTER TABLE ONLY public.usuarios ADD CONSTRAINT usuarios_pkey PRIMARY KEY (id); CREATE UNIQUE INDEX act ON public.config USING btree (act) WHERE (act = true); CREATE INDEX alfa_name ON public.robots USING gin (name public.gin_trgm_ops); CREATE INDEX alfa_uuid ON public.robots USING gin (((uuid)::text) public.gin_trgm_ops); CREATE INDEX alm_id ON public.almacenes USING btree (id DESC NULLS LAST); CREATE UNIQUE INDEX alm_inv_alm_art ON public.alm_inventario USING btree (alm, art); CREATE UNIQUE INDEX alm_uuid ON public.almacenes USING btree (uuid); CREATE INDEX art_name_alfa ON public.articulos USING gin (name public.gin_trgm_ops); CREATE UNIQUE INDEX art_name_uniq ON public.articulos USING btree (name); CREATE UNIQUE INDEX articulos_id ON public.articulos USING btree (id); CREATE UNIQUE INDEX bat_hist_id ON public.bat_historial USING btree (red_ele, bat, id DESC NULLS LAST); CREATE INDEX bat_hist_tim ON public.bat_historial USING btree (tim DESC NULLS LAST); CREATE UNIQUE INDEX bat_id ON public.bat USING btree (red_ele, id DESC NULLS LAST); CREATE INDEX config_id ON public.config USING btree (id); CREATE INDEX drn_gps_gps ON public.drn_gps USING btree (drn); CREATE INDEX drn_inventario_drn ON public.drn_inventario USING btree (drn); CREATE UNIQUE INDEX drn_inventario_id ON public.drn_inventario USING btree (drn, id DESC NULLS LAST); CREATE INDEX drn_log_drn ON public.drn_logs USING btree (drn); CREATE UNIQUE INDEX drn_log_id ON public.drn_logs USING btree (drn, id DESC NULLS LAST); CREATE INDEX drone_alfa_uuid ON public.drones USING gin (((uuid)::text) public.gin_trgm_ops); CREATE INDEX drone_name ON public.drones USING gin (name public.gin_trgm_ops); CREATE INDEX drones_id ON public.drones USING btree (id DESC NULLS LAST); CREATE UNIQUE INDEX gen_id ON public.gen USING btree (red_ele, id DESC NULLS LAST); CREATE UNIQUE INDEX gen_uuid ON public.gen USING btree (uuid); CREATE UNIQUE INDEX id ON public.robots USING btree (id); CREATE UNIQUE INDEX id_desc ON public.robots USING btree (id DESC NULLS LAST); CREATE UNIQUE INDEX id_on ON public.robots USING btree (id) WHERE (off = false); CREATE UNIQUE INDEX key_uuid ON public.api_key USING btree (uuid); CREATE UNIQUE INDEX mine_id ON public.articulos USING btree (mine_id); CREATE INDEX mine_id_alfa ON public.articulos USING gin (mine_id public.gin_trgm_ops); CREATE UNIQUE INDEX mov_id ON public.mov_inventario USING btree (alm, id DESC NULLS LAST); CREATE INDEX mov_time ON public.mov_inventario USING btree (date_add DESC NULLS LAST); CREATE INDEX notif_leido ON public.notificaciones USING btree (leido DESC NULLS LAST); CREATE INDEX ord_min_estado ON public.ordenes_minado USING btree (estado); CREATE UNIQUE INDEX ord_min_id ON public.ordenes_minado USING btree (id DESC NULLS LAST); CREATE INDEX ord_min_inv_art_cant ON public.ord_min_inventario USING btree (art, cant DESC NULLS LAST); CREATE UNIQUE INDEX ord_min_inv_id ON public.ord_min_inventario USING btree (ord_min, id DESC NULLS LAST); CREATE INDEX ord_min_rob ON public.ordenes_minado USING btree (rob); CREATE INDEX redes_electricas_name ON public.redes_electricas USING gin (name public.gin_trgm_ops); CREATE INDEX rob_gps_rob ON public.rob_gps USING btree (rob); CREATE UNIQUE INDEX rob_gps_rob_tim ON public.rob_gps USING btree (rob, id DESC NULLS LAST); CREATE INDEX rob_gps_tim ON public.rob_gps USING btree (id DESC NULLS LAST); CREATE UNIQUE INDEX rob_inv_rob_num_slot ON public.rob_inventario USING btree (rob, num_slot); CREATE INDEX rob_inventario_articulo ON public.rob_inventario USING btree (art); CREATE UNIQUE INDEX rob_log_id ON public.rob_logs USING btree (rob, id DESC NULLS LAST); CREATE UNIQUE INDEX server_uuid ON public.servers USING btree (uuid); CREATE INDEX usuarios_name ON public.usuarios USING gin (name public.gin_trgm_ops); CREATE UNIQUE INDEX usuarios_name_uniq ON public.usuarios USING btree (name DESC NULLS LAST); CREATE INDEX usuarios_off ON public.usuarios USING btree (off DESC NULLS LAST); CREATE UNIQUE INDEX uuid ON public.robots USING btree (uuid); CREATE UNIQUE INDEX uuid_bat ON public.bat USING btree (uuid); CREATE UNIQUE INDEX uuid_drn ON public.drones USING btree (uuid) WHERE ((uuid)::text <> ''::text); CREATE TRIGGER act_robot_inv_actualizar BEFORE UPDATE ON public.rob_inventario FOR EACH ROW EXECUTE FUNCTION public.act_robot_inv_actualizar(); CREATE TRIGGER act_robot_inv_insertar BEFORE INSERT ON public.rob_inventario FOR EACH ROW EXECUTE FUNCTION public.act_robot_inv_insertar(); CREATE TRIGGER alt_drone_gen_drn_inv AFTER INSERT ON public.drones FOR EACH ROW EXECUTE FUNCTION public.alt_drone_gen_drn_inv(); CREATE TRIGGER alt_robot_gen_rob_inv AFTER INSERT ON public.robots FOR EACH ROW EXECUTE FUNCTION public.alt_robot_gen_rob_inv(); CREATE TRIGGER alt_robot_next_id BEFORE INSERT ON public.robots FOR EACH ROW EXECUTE FUNCTION public.alt_robot_next_id(); CREATE TRIGGER drone_post_update AFTER UPDATE ON public.drones FOR EACH ROW EXECUTE FUNCTION public.drone_post_update(); CREATE TRIGGER mod_drone_gen_drn_inv AFTER UPDATE ON public.drones FOR EACH ROW EXECUTE FUNCTION public.mod_drone_gen_drn_inv(); CREATE TRIGGER mod_robot_gen_rob_inv AFTER UPDATE ON public.robots FOR EACH ROW EXECUTE FUNCTION public.mod_robot_gen_rob_inv(); CREATE TRIGGER robot_post_update AFTER UPDATE ON public.robots FOR EACH ROW EXECUTE FUNCTION public.robot_post_update(); CREATE TRIGGER set_alm_inv_notificacion_id BEFORE INSERT ON public.alm_inv_notificacion FOR EACH ROW EXECUTE FUNCTION public.set_alm_inv_notificacion_id(); CREATE TRIGGER set_alm_inventario_id BEFORE INSERT ON public.alm_inventario FOR EACH ROW EXECUTE FUNCTION public.set_alm_inventario_id(); CREATE TRIGGER set_almacenes_id BEFORE INSERT ON public.almacenes FOR EACH ROW EXECUTE FUNCTION public.set_almacenes_id(); CREATE TRIGGER set_api_key_id BEFORE INSERT ON public.api_key FOR EACH ROW EXECUTE FUNCTION public.set_api_key_id(); CREATE TRIGGER set_articulos_id BEFORE INSERT ON public.articulos FOR EACH ROW EXECUTE FUNCTION public.set_articulos_id(); CREATE TRIGGER set_bat_hist_id BEFORE INSERT ON public.bat_historial FOR EACH ROW EXECUTE FUNCTION public.set_bat_hist_id(); CREATE TRIGGER set_bat_id BEFORE INSERT ON public.bat FOR EACH ROW EXECUTE FUNCTION public.set_bat_id(); CREATE TRIGGER set_config_id BEFORE INSERT ON public.config FOR EACH ROW EXECUTE FUNCTION public.set_config_id(); CREATE TRIGGER set_drn_inventario_id BEFORE INSERT ON public.drn_inventario FOR EACH ROW EXECUTE FUNCTION public.set_drn_inventario_id(); CREATE TRIGGER set_drones_id BEFORE INSERT ON public.drones FOR EACH ROW EXECUTE FUNCTION public.set_drones_id(); CREATE TRIGGER set_gen_id BEFORE INSERT ON public.gen FOR EACH ROW EXECUTE FUNCTION public.set_gen_id(); CREATE TRIGGER set_mov_inventario_id BEFORE INSERT ON public.mov_inventario FOR EACH ROW EXECUTE FUNCTION public.set_mov_inventario_id(); CREATE TRIGGER set_ord_min_inventario_id BEFORE INSERT ON public.ord_min_inventario FOR EACH ROW EXECUTE FUNCTION public.set_ord_min_inventario_id(); CREATE TRIGGER set_ordenes_minado_id BEFORE INSERT ON public.ordenes_minado FOR EACH ROW EXECUTE FUNCTION public.set_ordenes_minado_id(); CREATE TRIGGER set_redes_electricas_id BEFORE INSERT ON public.redes_electricas FOR EACH ROW EXECUTE FUNCTION public.set_redes_electricas_id(); CREATE TRIGGER set_usuarios_id BEFORE INSERT ON public.usuarios FOR EACH ROW EXECUTE FUNCTION public.set_usuarios_id(); ALTER TABLE ONLY public.alm_inv_notificacion ADD CONSTRAINT alm_alm_inv_not FOREIGN KEY (alm) REFERENCES public.almacenes(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.alm_inventario ADD CONSTRAINT alm_alm_inventario FOREIGN KEY (alm) REFERENCES public.almacenes(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.alm_inv_notificacion ADD CONSTRAINT art_alm_inv_not FOREIGN KEY (art) REFERENCES public.articulos(id) NOT VALID; ALTER TABLE ONLY public.alm_inventario ADD CONSTRAINT art_alm_inventario FOREIGN KEY (art) REFERENCES public.articulos(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.rob_inventario ADD CONSTRAINT articulo_rob_inventario FOREIGN KEY (art) REFERENCES public.articulos(id) ON UPDATE CASCADE ON DELETE RESTRICT; ALTER TABLE ONLY public.bat_historial ADD CONSTRAINT bat_historial_bat FOREIGN KEY (bat, red_ele) REFERENCES public.bat(id, red_ele) NOT VALID; ALTER TABLE ONLY public.bat_historial ADD CONSTRAINT bat_historial_red_ele FOREIGN KEY (red_ele) REFERENCES public.redes_electricas(id) NOT VALID; ALTER TABLE ONLY public.drn_gps ADD CONSTRAINT drn_gps_drone FOREIGN KEY (drn) REFERENCES public.drones(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.drn_inventario ADD CONSTRAINT drn_inventario_drones FOREIGN KEY (drn) REFERENCES public.drones(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.drn_logs ADD CONSTRAINT drn_log_drones FOREIGN KEY (drn) REFERENCES public.drones(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.mapa ADD CONSTRAINT geo_art FOREIGN KEY (art) REFERENCES public.articulos(id) ON UPDATE CASCADE ON DELETE SET NULL NOT VALID; ALTER TABLE ONLY public.mov_inventario ADD CONSTRAINT mov_inv_alm FOREIGN KEY (alm) REFERENCES public.almacenes(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.mov_inventario ADD CONSTRAINT mov_inv_art FOREIGN KEY (art) REFERENCES public.articulos(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.ord_min_inventario ADD CONSTRAINT ord_min_inventario_art FOREIGN KEY (art) REFERENCES public.articulos(id) NOT VALID; ALTER TABLE ONLY public.ord_min_inventario ADD CONSTRAINT ord_min_inventario_ord_min FOREIGN KEY (ord_min) REFERENCES public.ordenes_minado(id) NOT VALID; ALTER TABLE ONLY public.bat ADD CONSTRAINT red_ele_bat FOREIGN KEY (red_ele) REFERENCES public.redes_electricas(id) ON UPDATE CASCADE ON DELETE RESTRICT; ALTER TABLE ONLY public.gen ADD CONSTRAINT red_ele_gen FOREIGN KEY (red_ele) REFERENCES public.redes_electricas(id) ON UPDATE CASCADE ON DELETE RESTRICT; ALTER TABLE ONLY public.ordenes_minado ADD CONSTRAINT rob FOREIGN KEY (rob) REFERENCES public.robots(id) NOT VALID; ALTER TABLE ONLY public.robots ADD CONSTRAINT rob_ord_min FOREIGN KEY (ord_min) REFERENCES public.ordenes_minado(id) NOT VALID; ALTER TABLE ONLY public.rob_gps ADD CONSTRAINT robot_rob_gps FOREIGN KEY (rob) REFERENCES public.robots(id) ON UPDATE CASCADE ON DELETE CASCADE; ALTER TABLE ONLY public.rob_inventario ADD CONSTRAINT robot_rob_inventario FOREIGN KEY (rob) REFERENCES public.robots(id) ON UPDATE CASCADE ON DELETE CASCADE; ALTER TABLE ONLY public.rob_logs ADD CONSTRAINT robot_rob_logs FOREIGN KEY (rob) REFERENCES public.robots(id) ON UPDATE CASCADE ON DELETE CASCADE;