SET statement_timeout = 0; SET lock_timeout = 0; SET idle_in_transaction_session_timeout = 0; SET client_encoding = 'UTF8'; SET standard_conforming_strings = on; SELECT pg_catalog.set_config('search_path', '', false); SET check_function_bodies = false; SET xmloption = content; SET client_min_messages = warning; SET row_security = off; CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public; COMMENT ON EXTENSION pg_trgm IS 'text similarity measurement and index searching based on trigrams'; CREATE FUNCTION public.act_robot_inv_actualizar() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN IF OLD.cant != NEW.cant THEN UPDATE robots SET num_items = num_items + (NEW.cant - OLD.cant) WHERE id = NEW.rob; END IF; IF (NEW.cant > 0) AND (OLD.cant = 0) THEN UPDATE robots SET num_stacks = num_stacks + 1 WHERE id = NEW.rob; ELSEIF (NEW.cant = 0) AND (OLD.cant > 0) THEN UPDATE robots SET num_stacks = num_stacks - 1 WHERE id = NEW.rob; END IF; RETURN NEW; END; $$; ALTER FUNCTION public.act_robot_inv_actualizar() OWNER TO postgres; CREATE FUNCTION public.act_robot_inv_insertar() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN UPDATE robots SET num_items = num_items + NEW.cant WHERE id = NEW.rob; IF (NEW.cant > 0) THEN UPDATE robots SET num_stacks = num_stacks + 1 WHERE id = NEW.rob; END IF; RETURN NEW; END; $$; ALTER FUNCTION public.act_robot_inv_insertar() OWNER TO postgres; CREATE FUNCTION public.alt_drone_gen_drn_inv() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN IF (NEW.num_slots > 0) THEN FOR i IN 1..NEW.num_slots LOOP INSERT INTO drn_inventario ("drn", "id", "num_slot", "cant", "art") VALUES (NEW.id, i, i, 0, NULL); END LOOP; END IF; RETURN NEW; END; $$; ALTER FUNCTION public.alt_drone_gen_drn_inv() OWNER TO postgres; CREATE FUNCTION public.alt_robot_gen_rob_inv() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN IF (NEW.num_slots > 0) THEN FOR i IN 1..NEW.num_slots LOOP INSERT INTO rob_inventario ("rob", "id", "num_slot", "cant", "art") VALUES (NEW.id, i, i, 0, NULL); END LOOP; END IF; RETURN NEW; END; $$; ALTER FUNCTION public.alt_robot_gen_rob_inv() OWNER TO postgres; CREATE FUNCTION public.alt_robot_next_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(robots.id) END AS id FROM robots) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.alt_robot_next_id() OWNER TO postgres; CREATE FUNCTION public.drone_post_update() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.date_upd = CURRENT_TIMESTAMP(3); RETURN NEW; END; $$; ALTER FUNCTION public.drone_post_update() OWNER TO postgres; CREATE FUNCTION public.mod_drone_gen_drn_inv() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN IF (NEW.num_slots != OLD.num_slots) THEN IF (NEW.num_slots > OLD.num_slots) THEN FOR i IN (OLD.num_slots + 1)..NEW.num_slots LOOP INSERT INTO drn_inventario ("drn", "id", "num_slot", "cant", "art") VALUES (NEW.id, i, i, 0, NULL); END LOOP; ELSE DELETE FROM drn_inventario WHERE rob = NEW.id AND num_slot > NEW.num_slots; END IF; END IF; RETURN NEW; END; $$; ALTER FUNCTION public.mod_drone_gen_drn_inv() OWNER TO postgres; CREATE FUNCTION public.mod_robot_gen_rob_inv() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN IF (NEW.num_slots != OLD.num_slots) THEN IF (NEW.num_slots > OLD.num_slots) THEN FOR i IN (OLD.num_slots + 1)..NEW.num_slots LOOP INSERT INTO rob_inventario ("rob", "id", "num_slot", "cant", "art") VALUES (NEW.id, i, i, 0, NULL); END LOOP; ELSE DELETE FROM rob_inventario WHERE rob = NEW.id AND num_slot > NEW.num_slots; END IF; END IF; RETURN NEW; END; $$; ALTER FUNCTION public.mod_robot_gen_rob_inv() OWNER TO postgres; CREATE FUNCTION public.robot_post_update() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.date_upd = CURRENT_TIMESTAMP(3); RETURN NEW; END; $$; ALTER FUNCTION public.robot_post_update() OWNER TO postgres; CREATE FUNCTION public.set_alm_inventario_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(alm_inventario.id) END AS id FROM alm_inventario WHERE "alm" = NEW.alm) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_alm_inventario_id() OWNER TO postgres; CREATE FUNCTION public.set_almacenes_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(almacenes.id) END AS id FROM almacenes) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_almacenes_id() OWNER TO postgres; CREATE FUNCTION public.set_api_key_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(api_key.id) END AS id FROM api_key) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_api_key_id() OWNER TO postgres; CREATE FUNCTION public.set_articulos_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(articulos.id) END AS id FROM articulos) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_articulos_id() OWNER TO postgres; CREATE FUNCTION public.set_bat_hist_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(bat_historial.id) END AS id FROM bat_historial WHERE "red_ele" = NEW.red_ele AND "bat" = NEW.bat) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_bat_hist_id() OWNER TO postgres; CREATE FUNCTION public.set_bat_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(bat.id) END AS id FROM bat WHERE "red_ele" = NEW.red_ele) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_bat_id() OWNER TO postgres; CREATE FUNCTION public.set_config_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(config.id) END AS id FROM config) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_config_id() OWNER TO postgres; CREATE FUNCTION public.set_drn_gps_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(drn_gps.id) END AS id FROM drn_gps WHERE "drn" = NEW.drn) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_drn_gps_id() OWNER TO postgres; CREATE FUNCTION public.set_drn_inventario_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(drn_inventario.id) END AS id FROM drn_inventario WHERE "drn" = NEW.drn) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_drn_inventario_id() OWNER TO postgres; CREATE FUNCTION public.set_drn_log_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(drn_logs.id) END AS id FROM drn_logs WHERE "drn" = NEW.drn) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_drn_log_id() OWNER TO postgres; CREATE FUNCTION public.set_drones_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(drones.id) END AS id FROM drones) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_drones_id() OWNER TO postgres; CREATE FUNCTION public.set_gen_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(gen.id) END AS id FROM gen WHERE "red_ele" = NEW.red_ele) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_gen_id() OWNER TO postgres; CREATE FUNCTION public.set_mov_inventario_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(mov_inventario.id) END AS id FROM mov_inventario WHERE "alm" = NEW.alm) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_mov_inventario_id() OWNER TO postgres; CREATE FUNCTION public.set_ord_min_inventario_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(ord_min_inventario.id) END AS id FROM ord_min_inventario WHERE "ord_min" = NEW.ord_min) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_ord_min_inventario_id() OWNER TO postgres; CREATE FUNCTION public.set_ordenes_minado_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(ordenes_minado.id) END AS id FROM ordenes_minado) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_ordenes_minado_id() OWNER TO postgres; CREATE FUNCTION public.set_redes_electricas_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(redes_electricas.id) END AS id FROM redes_electricas) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_redes_electricas_id() OWNER TO postgres; CREATE FUNCTION public.set_usuarios_id() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.id = (SELECT CASE COUNT(*) WHEN 0 THEN 0 ELSE MAX(usuarios.id) END AS id FROM usuarios) + 1; RETURN NEW; END; $$; ALTER FUNCTION public.set_usuarios_id() OWNER TO postgres; SET default_tablespace = ''; SET default_table_access_method = heap; CREATE TABLE public.alm_inventario ( alm smallint NOT NULL, id smallint NOT NULL, art smallint NOT NULL, cant integer DEFAULT 0 NOT NULL ); ALTER TABLE public.alm_inventario OWNER TO postgres; COMMENT ON TABLE public.alm_inventario IS 'Stacks del almacén'; COMMENT ON COLUMN public.alm_inventario.alm IS 'Almacén'; COMMENT ON COLUMN public.alm_inventario.art IS 'Artículo'; COMMENT ON COLUMN public.alm_inventario.cant IS 'Cantidad'; CREATE TABLE public.almacenes ( id smallint NOT NULL, name character varying(50) NOT NULL, dsc text DEFAULT ''::text NOT NULL, slots smallint DEFAULT 0 NOT NULL, items integer DEFAULT 0 NOT NULL, off boolean NOT NULL, uuid uuid NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, date_inv_upd timestamp without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL ); ALTER TABLE public.almacenes OWNER TO postgres; COMMENT ON TABLE public.almacenes IS 'Almacenes'; COMMENT ON COLUMN public.almacenes.id IS 'ID'; COMMENT ON COLUMN public.almacenes.name IS 'Nombre'; COMMENT ON COLUMN public.almacenes.dsc IS 'Descripción'; COMMENT ON COLUMN public.almacenes.slots IS 'Slots usados'; COMMENT ON COLUMN public.almacenes.items IS 'Suma de los stacks'; COMMENT ON COLUMN public.almacenes.off IS '¿Desactivado?'; COMMENT ON COLUMN public.almacenes.uuid IS 'UUID'; COMMENT ON COLUMN public.almacenes.date_add IS 'Fecha de creación'; COMMENT ON COLUMN public.almacenes.date_inv_upd IS 'Fecha de última actualización del inventario'; CREATE TABLE public.api_key ( id smallint NOT NULL, name character varying(40) NOT NULL, uuid uuid NOT NULL, ultima_con timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL ); ALTER TABLE public.api_key OWNER TO postgres; COMMENT ON TABLE public.api_key IS 'Claves de API'; COMMENT ON COLUMN public.api_key.id IS 'ID'; COMMENT ON COLUMN public.api_key.name IS 'Nombre'; COMMENT ON COLUMN public.api_key.uuid IS 'UUID'; COMMENT ON COLUMN public.api_key.ultima_con IS 'Tiempo de última conexión'; CREATE TABLE public.articulos ( id smallint NOT NULL, name character varying(50) NOT NULL, mine_id character varying(50) NOT NULL, cant integer DEFAULT 0 NOT NULL, dsc text DEFAULT ''::text NOT NULL, img bytea, img_size smallint DEFAULT 0 NOT NULL ); ALTER TABLE public.articulos OWNER TO postgres; COMMENT ON TABLE public.articulos IS 'Artículos'; COMMENT ON COLUMN public.articulos.name IS 'Nombre'; COMMENT ON COLUMN public.articulos.mine_id IS 'Minecraft ID'; COMMENT ON COLUMN public.articulos.cant IS 'Cantidad'; COMMENT ON COLUMN public.articulos.dsc IS 'Descripción'; COMMENT ON COLUMN public.articulos.img IS 'Imagen'; COMMENT ON COLUMN public.articulos.img_size IS 'Tamaño en bytes de la imagen'; CREATE TABLE public.bat ( id smallint NOT NULL, red_ele smallint NOT NULL, name character varying(50) NOT NULL, uuid uuid NOT NULL, cap_ele bigint NOT NULL, carga_act bigint NOT NULL, dsc text DEFAULT ''::text NOT NULL, tipo "char" DEFAULT 'O'::"char" NOT NULL ); ALTER TABLE public.bat OWNER TO postgres; COMMENT ON TABLE public.bat IS 'Baterías'; COMMENT ON COLUMN public.bat.id IS 'ID'; COMMENT ON COLUMN public.bat.red_ele IS 'Red eléctrica'; COMMENT ON COLUMN public.bat.name IS 'Nombre'; COMMENT ON COLUMN public.bat.cap_ele IS 'Capacidad eléctrica'; COMMENT ON COLUMN public.bat.carga_act IS 'Carga actual'; COMMENT ON COLUMN public.bat.dsc IS 'Descripción'; COMMENT ON COLUMN public.bat.tipo IS 'B = BatBox, C = CESU, M = MFE, F = MFSU, O = Otro'; CREATE TABLE public.bat_historial ( red_ele smallint NOT NULL, bat smallint NOT NULL, id bigint NOT NULL, tim timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, carga_act bigint NOT NULL ); ALTER TABLE public.bat_historial OWNER TO postgres; COMMENT ON TABLE public.bat_historial IS 'Historial de la batería'; COMMENT ON COLUMN public.bat_historial.bat IS 'Batería'; COMMENT ON COLUMN public.bat_historial.tim IS 'Tiempo'; CREATE TABLE public.config ( id smallint NOT NULL, name character varying(50) NOT NULL, act boolean NOT NULL, lim_rob_gps boolean NOT NULL, horas_rob_gps smallint NOT NULL, lim_robot_log boolean NOT NULL, horas_rob_log smallint NOT NULL, lim_drn_gps boolean NOT NULL, horas_drn_gps smallint NOT NULL, lim_drn_log boolean NOT NULL, horas_drn_log smallint NOT NULL, lim_bat_hist boolean NOT NULL, horas_bat_hist smallint NOT NULL, vacuum_lim boolean NOT NULL, reindex_lim boolean NOT NULL, ping_int smallint DEFAULT 0 NOT NULL, timeout smallint DEFAULT 0 NOT NULL, web_port integer DEFAULT 32324 NOT NULL, oc_port integer DEFAULT 32325 NOT NULL, hash_rounds integer DEFAULT 5000 NOT NULL ); ALTER TABLE public.config OWNER TO postgres; COMMENT ON TABLE public.config IS 'Configuraciones'; COMMENT ON COLUMN public.config.id IS 'ID'; COMMENT ON COLUMN public.config.name IS 'Nombre'; COMMENT ON COLUMN public.config.act IS '¿Activado?'; COMMENT ON COLUMN public.config.vacuum_lim IS '¿Hacer ''VACUUM'' después de limpiar?'; COMMENT ON COLUMN public.config.reindex_lim IS '¿Hacer REINDEX después de limpiar?'; COMMENT ON COLUMN public.config.ping_int IS 'Segundos del intervalo de ping'; COMMENT ON COLUMN public.config.timeout IS 'Segundos de timeout de los dispositivos'; COMMENT ON COLUMN public.config.web_port IS 'Puerto de escucha de la web'; COMMENT ON COLUMN public.config.oc_port IS 'Puerto de escucha de OpenComputers'; COMMENT ON COLUMN public.config.hash_rounds IS 'Iteraciones por defecto para hacer hash a las contraseñas de los usuarios.'; CREATE TABLE public.drn_gps ( drn smallint NOT NULL, id timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, pos_x smallint NOT NULL, pos_y smallint NOT NULL, pos_z smallint NOT NULL ); ALTER TABLE public.drn_gps OWNER TO postgres; COMMENT ON TABLE public.drn_gps IS 'Historial de ubicaciones de un drone'; COMMENT ON COLUMN public.drn_gps.drn IS 'Drone'; COMMENT ON COLUMN public.drn_gps.id IS 'Tiempo'; COMMENT ON COLUMN public.drn_gps.pos_x IS 'Posición X'; COMMENT ON COLUMN public.drn_gps.pos_y IS 'Posición Y'; COMMENT ON COLUMN public.drn_gps.pos_z IS 'Posición Z'; CREATE TABLE public.drn_inventario ( drn smallint NOT NULL, id bigint NOT NULL, num_slot smallint NOT NULL, cant smallint NOT NULL, art smallint ); ALTER TABLE public.drn_inventario OWNER TO postgres; COMMENT ON TABLE public.drn_inventario IS 'Inventario del drone'; COMMENT ON COLUMN public.drn_inventario.drn IS 'Drone'; COMMENT ON COLUMN public.drn_inventario.id IS 'ID'; COMMENT ON COLUMN public.drn_inventario.num_slot IS 'Número de slot'; COMMENT ON COLUMN public.drn_inventario.cant IS 'Cantidad'; COMMENT ON COLUMN public.drn_inventario.art IS 'Artículo'; CREATE TABLE public.drn_logs ( drn smallint NOT NULL, id timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, titulo character varying(50) NOT NULL, msg text DEFAULT ''::text NOT NULL ); ALTER TABLE public.drn_logs OWNER TO postgres; COMMENT ON TABLE public.drn_logs IS 'Logs de los drones'; COMMENT ON COLUMN public.drn_logs.drn IS 'Drone'; COMMENT ON COLUMN public.drn_logs.id IS 'Tiempo'; COMMENT ON COLUMN public.drn_logs.titulo IS 'Título'; COMMENT ON COLUMN public.drn_logs.msg IS 'Mensaje'; CREATE TABLE public.drones ( id smallint NOT NULL, name character varying(50) NOT NULL, uuid uuid NOT NULL, num_slots smallint DEFAULT 0 NOT NULL, num_stacks smallint DEFAULT 0 NOT NULL, num_items smallint DEFAULT 0 NOT NULL, estado "char" DEFAULT 'F'::"char" NOT NULL, total_energia integer DEFAULT 20500 NOT NULL, energia_actual integer DEFAULT 0 NOT NULL, fecha_con timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, fecha_descon timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, dsc text DEFAULT ''::text NOT NULL, upgrade_gps boolean DEFAULT false NOT NULL, pos_x smallint DEFAULT 0 NOT NULL, pos_y smallint DEFAULT 0 NOT NULL, pos_z smallint DEFAULT 0 NOT NULL, upgrade_gen boolean DEFAULT false NOT NULL, items_gen smallint DEFAULT 0 NOT NULL, complejidad smallint DEFAULT 0 NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, date_upd timestamp without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, off boolean DEFAULT false NOT NULL, off_pos_x smallint DEFAULT 0 NOT NULL, off_pos_y smallint DEFAULT 0 NOT NULL, off_pos_z smallint DEFAULT 0 NOT NULL, tier smallint DEFAULT 1 NOT NULL ); ALTER TABLE public.drones OWNER TO postgres; COMMENT ON TABLE public.drones IS 'Drones'; COMMENT ON COLUMN public.drones.id IS 'ID'; COMMENT ON COLUMN public.drones.name IS 'Nombre'; COMMENT ON COLUMN public.drones.uuid IS 'UUID'; COMMENT ON COLUMN public.drones.num_slots IS 'Número de slots disponibles'; COMMENT ON COLUMN public.drones.num_stacks IS 'Número de stacks usados'; COMMENT ON COLUMN public.drones.num_items IS 'Número de items en el inventario'; COMMENT ON COLUMN public.drones.estado IS 'O = Online, M = Minando, F = Offline, L = Conexión perdida, B = Sin batería	'; COMMENT ON COLUMN public.drones.total_energia IS 'Total de energía'; COMMENT ON COLUMN public.drones.energia_actual IS 'Energía actual'; COMMENT ON COLUMN public.drones.fecha_con IS 'Fecha de conexión'; COMMENT ON COLUMN public.drones.fecha_descon IS 'Fecha de desconexión'; COMMENT ON COLUMN public.drones.dsc IS 'Descripción'; COMMENT ON COLUMN public.drones.upgrade_gps IS '¿Upgrade de GPS?'; COMMENT ON COLUMN public.drones.pos_x IS 'Posición X'; COMMENT ON COLUMN public.drones.pos_y IS 'Posición Y'; COMMENT ON COLUMN public.drones.pos_z IS 'Posición Z'; COMMENT ON COLUMN public.drones.upgrade_gen IS '¿Upgrade de generador?'; COMMENT ON COLUMN public.drones.items_gen IS 'Número de ítems en el generador'; COMMENT ON COLUMN public.drones.complejidad IS 'Complejidad'; COMMENT ON COLUMN public.drones.date_add IS 'Fecha de creación'; COMMENT ON COLUMN public.drones.date_upd IS 'Fecha de modificación'; COMMENT ON COLUMN public.drones.off IS '¿Desactivado?'; COMMENT ON COLUMN public.drones.off_pos_x IS 'Offset posición X'; COMMENT ON COLUMN public.drones.off_pos_y IS 'Offset posición Y'; COMMENT ON COLUMN public.drones.off_pos_z IS 'Offset posición Z'; COMMENT ON COLUMN public.drones.tier IS 'Tier'; CREATE TABLE public.gen ( red_ele smallint NOT NULL, id smallint NOT NULL, name character varying(50) NOT NULL, uuid uuid NOT NULL, eu_t integer DEFAULT 0 NOT NULL, act boolean DEFAULT false NOT NULL, tipo "char" DEFAULT 'G'::"char" NOT NULL, dsc text DEFAULT ''::text NOT NULL ); ALTER TABLE public.gen OWNER TO postgres; COMMENT ON TABLE public.gen IS 'Generadores'; COMMENT ON COLUMN public.gen.red_ele IS 'Red eléctrica'; COMMENT ON COLUMN public.gen.id IS 'ID'; COMMENT ON COLUMN public.gen.name IS 'Nombre'; COMMENT ON COLUMN public.gen.uuid IS 'UUID'; COMMENT ON COLUMN public.gen.eu_t IS 'EU/tick'; COMMENT ON COLUMN public.gen.act IS '¿Activo?'; COMMENT ON COLUMN public.gen.tipo IS 'G = Generador convencional, S = Generador semifluidos, R = Energia solar, T = Generador geotermal, O = Otro'; COMMENT ON COLUMN public.gen.dsc IS 'Descripción'; CREATE TABLE public.mapa ( pos_x smallint NOT NULL, pos_y smallint NOT NULL, pos_z smallint NOT NULL, art smallint ); ALTER TABLE public.mapa OWNER TO postgres; COMMENT ON TABLE public.mapa IS 'Impresión del mapa geolizado'; COMMENT ON COLUMN public.mapa.art IS 'Artículo'; CREATE TABLE public.mov_inventario ( alm smallint NOT NULL, id bigint NOT NULL, art smallint NOT NULL, cant integer DEFAULT 0 NOT NULL, origen "char" DEFAULT 'A'::"char" NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, dsc text DEFAULT ''::text NOT NULL ); ALTER TABLE public.mov_inventario OWNER TO postgres; COMMENT ON TABLE public.mov_inventario IS 'Movimientos de inventario'; COMMENT ON COLUMN public.mov_inventario.alm IS 'Almacén'; COMMENT ON COLUMN public.mov_inventario.id IS 'Código'; COMMENT ON COLUMN public.mov_inventario.art IS 'Artículo'; COMMENT ON COLUMN public.mov_inventario.cant IS 'Cantidad'; COMMENT ON COLUMN public.mov_inventario.origen IS 'A = Automático, M = Manual'; COMMENT ON COLUMN public.mov_inventario.date_add IS 'Fecha de creación'; COMMENT ON COLUMN public.mov_inventario.dsc IS 'Descripción'; CREATE TABLE public.ord_min_inventario ( ord_min integer NOT NULL, id smallint NOT NULL, art smallint NOT NULL, cant smallint NOT NULL ); ALTER TABLE public.ord_min_inventario OWNER TO postgres; CREATE TABLE public.ordenes_minado ( id integer NOT NULL, name character varying(50) NOT NULL, size smallint NOT NULL, rob smallint, pos_x smallint DEFAULT 0 NOT NULL, pos_y smallint DEFAULT 0 NOT NULL, pos_z smallint DEFAULT 0 NOT NULL, gps_x smallint NOT NULL, gps_y smallint NOT NULL, gps_z smallint NOT NULL, num_items integer DEFAULT 0 NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, date_upd timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, date_inicio timestamp(3) without time zone, date_fin timestamp(3) without time zone, dsc text DEFAULT ''::text NOT NULL, estado "char" DEFAULT 'Q'::"char" NOT NULL, recarga_unidad "char" DEFAULT '%'::"char" NOT NULL, energia_recarga smallint DEFAULT 0 NOT NULL, modo_minado "char" DEFAULT 'O'::"char" NOT NULL, pos_f smallint DEFAULT 0 NOT NULL, shutdown boolean DEFAULT false NOT NULL ); ALTER TABLE public.ordenes_minado OWNER TO postgres; COMMENT ON TABLE public.ordenes_minado IS 'Órdenes de minado'; COMMENT ON COLUMN public.ordenes_minado.id IS 'ID'; COMMENT ON COLUMN public.ordenes_minado.name IS 'Nombre'; COMMENT ON COLUMN public.ordenes_minado.size IS 'Parámetro -s'; COMMENT ON COLUMN public.ordenes_minado.rob IS 'Robot'; COMMENT ON COLUMN public.ordenes_minado.num_items IS 'Número de ítems obtenidos'; COMMENT ON COLUMN public.ordenes_minado.estado IS 'Q = En cola, R = Preparado, E = En Curso, O = Realizado'; COMMENT ON COLUMN public.ordenes_minado.recarga_unidad IS 'Unidad de energía (''%'' o ''='')'; COMMENT ON COLUMN public.ordenes_minado.energia_recarga IS 'Energía por debajo de la cual recargar el robot'; COMMENT ON COLUMN public.ordenes_minado.modo_minado IS 'O = Modo optimizado, E = Modo económico'; COMMENT ON COLUMN public.ordenes_minado.pos_f IS 'Facing'; COMMENT ON COLUMN public.ordenes_minado.shutdown IS '¿Apagar al finalizar?'; CREATE TABLE public.redes_electricas ( id smallint NOT NULL, name character varying(50) NOT NULL, cap_ele bigint DEFAULT 0 NOT NULL, carga_act bigint DEFAULT 0 NOT NULL, dsc text DEFAULT ''::text NOT NULL ); ALTER TABLE public.redes_electricas OWNER TO postgres; COMMENT ON TABLE public.redes_electricas IS 'Redes eléctricas'; COMMENT ON COLUMN public.redes_electricas.id IS 'ID'; COMMENT ON COLUMN public.redes_electricas.name IS 'Nombre'; COMMENT ON COLUMN public.redes_electricas.cap_ele IS 'Capacidad eléctrica'; COMMENT ON COLUMN public.redes_electricas.carga_act IS 'Carga actual	'; COMMENT ON COLUMN public.redes_electricas.dsc IS 'Descripción'; CREATE TABLE public.rob_gps ( rob smallint NOT NULL, id timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, pos_x smallint NOT NULL, pos_y smallint NOT NULL, pos_z smallint NOT NULL ); ALTER TABLE public.rob_gps OWNER TO postgres; COMMENT ON TABLE public.rob_gps IS 'Historial de ubicaciones del robot'; COMMENT ON COLUMN public.rob_gps.rob IS 'Robot'; COMMENT ON COLUMN public.rob_gps.id IS 'ID'; CREATE TABLE public.rob_inventario ( rob smallint NOT NULL, id smallint NOT NULL, num_slot smallint NOT NULL, cant smallint NOT NULL, art smallint ); ALTER TABLE public.rob_inventario OWNER TO postgres; COMMENT ON TABLE public.rob_inventario IS 'Inventario del robot'; COMMENT ON COLUMN public.rob_inventario.rob IS 'Robot'; COMMENT ON COLUMN public.rob_inventario.id IS 'ID'; COMMENT ON COLUMN public.rob_inventario.num_slot IS 'Número de slot'; COMMENT ON COLUMN public.rob_inventario.cant IS 'Cantidad'; COMMENT ON COLUMN public.rob_inventario.art IS 'Artículo'; CREATE TABLE public.rob_logs ( rob smallint NOT NULL, id timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, titulo character varying(50) NOT NULL, msg text DEFAULT ''::text NOT NULL ); ALTER TABLE public.rob_logs OWNER TO postgres; COMMENT ON TABLE public.rob_logs IS 'Logs del robot'; COMMENT ON COLUMN public.rob_logs.rob IS 'Robot'; COMMENT ON COLUMN public.rob_logs.id IS 'ID'; COMMENT ON COLUMN public.rob_logs.titulo IS 'Título'; COMMENT ON COLUMN public.rob_logs.msg IS 'Descripción'; CREATE TABLE public.robots ( id smallint NOT NULL, name character varying(50) NOT NULL, uuid uuid NOT NULL, tier smallint DEFAULT 1 NOT NULL, num_slots smallint DEFAULT 16 NOT NULL, num_stacks smallint DEFAULT 0 NOT NULL, num_items smallint DEFAULT 0 NOT NULL, estado character(1) DEFAULT 'F'::bpchar NOT NULL, total_energia integer DEFAULT 20500 NOT NULL, energia_actual integer DEFAULT 0 NOT NULL, upgrade_gen boolean DEFAULT false NOT NULL, items_gen smallint DEFAULT 0 NOT NULL, fecha_con timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, fecha_descon timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, dsc text DEFAULT ''::text NOT NULL, upgrade_gps boolean DEFAULT false NOT NULL, pos_x smallint DEFAULT 0 NOT NULL, pos_y smallint DEFAULT 0 NOT NULL, pos_z smallint DEFAULT 0 NOT NULL, complejidad smallint DEFAULT 0 NOT NULL, date_add timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, date_upd timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, off boolean DEFAULT false NOT NULL, off_pos_x smallint DEFAULT 0 NOT NULL, off_pos_y smallint DEFAULT 0 NOT NULL, off_pos_z smallint DEFAULT 0 NOT NULL, ord_min integer ); ALTER TABLE public.robots OWNER TO postgres; COMMENT ON TABLE public.robots IS 'Robots'; COMMENT ON COLUMN public.robots.id IS 'ID'; COMMENT ON COLUMN public.robots.name IS 'Nombre'; COMMENT ON COLUMN public.robots.tier IS 'Tier'; COMMENT ON COLUMN public.robots.num_slots IS 'Número de slots'; COMMENT ON COLUMN public.robots.num_stacks IS 'Número de stacks usados'; COMMENT ON COLUMN public.robots.num_items IS 'Número de items en el inventario'; COMMENT ON COLUMN public.robots.estado IS 'O = Online, M = Minando, F = Offline, L = Conexión perdida, B = Sin batería'; COMMENT ON COLUMN public.robots.total_energia IS 'Total de energía'; COMMENT ON COLUMN public.robots.energia_actual IS 'Energía actual'; COMMENT ON COLUMN public.robots.upgrade_gen IS '¿Upgrade de generador?'; COMMENT ON COLUMN public.robots.items_gen IS 'Número de ítems en el generador'; COMMENT ON COLUMN public.robots.fecha_con IS 'Fecha de conexión'; COMMENT ON COLUMN public.robots.fecha_descon IS 'Fecha de desconexión'; COMMENT ON COLUMN public.robots.dsc IS 'Descripción'; COMMENT ON COLUMN public.robots.upgrade_gps IS '¿Upgrade de GPS?'; COMMENT ON COLUMN public.robots.pos_x IS 'Posición X'; COMMENT ON COLUMN public.robots.pos_y IS 'Posición Y'; COMMENT ON COLUMN public.robots.pos_z IS 'Posición Z'; COMMENT ON COLUMN public.robots.complejidad IS 'Complejidad'; COMMENT ON COLUMN public.robots.date_add IS 'Fecha de creación'; COMMENT ON COLUMN public.robots.date_upd IS 'Fecha de modificación'; COMMENT ON COLUMN public.robots.off IS '¿Desactivado?'; COMMENT ON COLUMN public.robots.off_pos_x IS 'Offset posición X'; COMMENT ON COLUMN public.robots.off_pos_y IS 'Offset posición Y'; COMMENT ON COLUMN public.robots.off_pos_z IS 'Offset posición Z'; COMMENT ON COLUMN public.robots.ord_min IS 'Orden de minado'; CREATE TABLE public.servers ( uuid uuid NOT NULL, name character varying(50) NOT NULL, dsc text DEFAULT ''::text NOT NULL, online boolean DEFAULT false NOT NULL, ultima_con timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL ); ALTER TABLE public.servers OWNER TO postgres; COMMENT ON TABLE public.servers IS 'Servidores OpenComputers'; COMMENT ON COLUMN public.servers.ultima_con IS 'Tiempo de última conexión'; CREATE TABLE public.usuarios ( id smallint NOT NULL, name character varying(40) NOT NULL, pwd character(128) NOT NULL, salt character(30) NOT NULL, iteraciones integer NOT NULL, ultima_con timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP(3) NOT NULL, dsc text DEFAULT ''::text NOT NULL, off boolean DEFAULT false NOT NULL ); ALTER TABLE public.usuarios OWNER TO postgres; COMMENT ON TABLE public.usuarios IS 'Usuarios'; COMMENT ON COLUMN public.usuarios.id IS 'ID'; COMMENT ON COLUMN public.usuarios.name IS 'Nombre'; COMMENT ON COLUMN public.usuarios.pwd IS 'Password (SHA-512)'; COMMENT ON COLUMN public.usuarios.salt IS 'Salt criptográfico'; COMMENT ON COLUMN public.usuarios.iteraciones IS 'Iteraciones del hash contraseña	'; COMMENT ON COLUMN public.usuarios.ultima_con IS 'Última conexión'; COMMENT ON COLUMN public.usuarios.dsc IS 'Descripción'; COMMENT ON COLUMN public.usuarios.off IS 'Desactivado'; ALTER TABLE ONLY public.alm_inventario ADD CONSTRAINT alm_inventario_pkey PRIMARY KEY (alm, id); ALTER TABLE ONLY public.almacenes ADD CONSTRAINT almacenes_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.api_key ADD CONSTRAINT api_key_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.articulos ADD CONSTRAINT articulos_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.bat_historial ADD CONSTRAINT bat_historial_pkey PRIMARY KEY (red_ele, bat, id); ALTER TABLE ONLY public.bat ADD CONSTRAINT bat_pkey PRIMARY KEY (red_ele, id); ALTER TABLE ONLY public.config ADD CONSTRAINT config_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.drn_gps ADD CONSTRAINT drn_gps_pkey PRIMARY KEY (drn, id); ALTER TABLE ONLY public.drn_inventario ADD CONSTRAINT drn_inventario_pkey PRIMARY KEY (drn, id); ALTER TABLE ONLY public.drn_logs ADD CONSTRAINT drn_logs_pkey PRIMARY KEY (drn, id); ALTER TABLE ONLY public.drones ADD CONSTRAINT drones_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.gen ADD CONSTRAINT gen_pkey PRIMARY KEY (red_ele, id); ALTER TABLE ONLY public.mapa ADD CONSTRAINT mapa_pkey PRIMARY KEY (pos_x, pos_y, pos_z); ALTER TABLE ONLY public.mov_inventario ADD CONSTRAINT movimientos_inventario_pkey PRIMARY KEY (alm, id); ALTER TABLE ONLY public.ord_min_inventario ADD CONSTRAINT ord_min_inventario_pkey PRIMARY KEY (ord_min, id); ALTER TABLE ONLY public.ordenes_minado ADD CONSTRAINT ordenes_minado_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.redes_electricas ADD CONSTRAINT redes_electricas_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.rob_logs ADD CONSTRAINT "rob logs_pkey" PRIMARY KEY (rob, id); ALTER TABLE ONLY public.rob_gps ADD CONSTRAINT rob_gps_pkey PRIMARY KEY (rob, id); ALTER TABLE ONLY public.rob_inventario ADD CONSTRAINT rob_inventario_pkey PRIMARY KEY (rob, id); ALTER TABLE ONLY public.robots ADD CONSTRAINT robots_pkey PRIMARY KEY (id); ALTER TABLE ONLY public.servers ADD CONSTRAINT servers_pkey PRIMARY KEY (uuid); ALTER TABLE ONLY public.usuarios ADD CONSTRAINT usuarios_pkey PRIMARY KEY (id); CREATE UNIQUE INDEX act ON public.config USING btree (act) WHERE (act = true); COMMENT ON INDEX public.act IS 'Activado'; CREATE INDEX alfa_name ON public.robots USING gin (name public.gin_trgm_ops); COMMENT ON INDEX public.alfa_name IS 'Nombre'; CREATE INDEX alfa_uuid ON public.robots USING gin (to_tsvector('simple'::regconfig, (uuid)::text)); COMMENT ON INDEX public.alfa_uuid IS 'UUID'; CREATE INDEX alm_id ON public.almacenes USING btree (id DESC NULLS LAST); COMMENT ON INDEX public.alm_id IS 'Últimos IDs del almacén (ID siguiente al último)'; CREATE UNIQUE INDEX alm_inv_alm_art ON public.alm_inventario USING btree (alm, art); CREATE UNIQUE INDEX alm_uuid ON public.almacenes USING btree (uuid); COMMENT ON INDEX public.alm_uuid IS 'UUID'; CREATE INDEX art_name ON public.articulos USING gin (to_tsvector('english'::regconfig, (name)::text)); COMMENT ON INDEX public.art_name IS 'Nombre'; CREATE UNIQUE INDEX articulos_id ON public.articulos USING btree (id); COMMENT ON INDEX public.articulos_id IS 'ID de los artículos'; CREATE UNIQUE INDEX bat_hist_id ON public.bat_historial USING btree (red_ele, bat, id DESC NULLS LAST); CREATE INDEX bat_hist_tim ON public.bat_historial USING btree (tim DESC NULLS LAST); CREATE UNIQUE INDEX bat_id ON public.bat USING btree (red_ele, id DESC NULLS LAST); COMMENT ON INDEX public.bat_id IS 'Último ID'; CREATE INDEX config_id ON public.config USING btree (id); COMMENT ON INDEX public.config_id IS 'ID'; CREATE INDEX drn_gps_gps ON public.drn_gps USING btree (drn); COMMENT ON INDEX public.drn_gps_gps IS 'Plural drone'; CREATE INDEX drn_inventario_drn ON public.drn_inventario USING btree (drn); COMMENT ON INDEX public.drn_inventario_drn IS 'Plural Drone'; CREATE UNIQUE INDEX drn_inventario_id ON public.drn_inventario USING btree (drn, id DESC NULLS LAST); COMMENT ON INDEX public.drn_inventario_id IS 'Últimos IDs del histórico del drone (para Sub-Maestro)'; CREATE INDEX drn_log_drn ON public.drn_logs USING btree (drn); COMMENT ON INDEX public.drn_log_drn IS 'Plural Drone'; CREATE UNIQUE INDEX drn_log_id ON public.drn_logs USING btree (drn, id DESC NULLS LAST); CREATE INDEX drone_alfa_uuid ON public.drones USING gin (to_tsvector('simple'::regconfig, (uuid)::text)); COMMENT ON INDEX public.drone_alfa_uuid IS 'UUID'; CREATE INDEX drone_name ON public.drones USING gin (name public.gin_trgm_ops); COMMENT ON INDEX public.drone_name IS 'Nombre'; CREATE INDEX drones_id ON public.drones USING btree (id DESC NULLS LAST); COMMENT ON INDEX public.drones_id IS 'ID'; CREATE UNIQUE INDEX gen_id ON public.gen USING btree (red_ele, id DESC NULLS LAST); COMMENT ON INDEX public.gen_id IS 'Último ID'; CREATE UNIQUE INDEX gen_uuid ON public.gen USING btree (uuid); COMMENT ON INDEX public.gen_uuid IS 'Identificador único del controlador'; CREATE UNIQUE INDEX id ON public.robots USING btree (id); COMMENT ON INDEX public.id IS 'ID'; CREATE UNIQUE INDEX id_desc ON public.robots USING btree (id DESC NULLS LAST); COMMENT ON INDEX public.id_desc IS 'Últimos IDs'; CREATE UNIQUE INDEX id_on ON public.robots USING btree (id) WHERE (off = false); COMMENT ON INDEX public.id_on IS 'Activados'; CREATE UNIQUE INDEX key_uuid ON public.api_key USING btree (uuid); COMMENT ON INDEX public.key_uuid IS 'UUID'; CREATE UNIQUE INDEX mine_id ON public.articulos USING btree (mine_id) WHERE ((mine_id)::text <> ''::text); COMMENT ON INDEX public.mine_id IS 'ID de Minecraft'; CREATE UNIQUE INDEX mov_id ON public.mov_inventario USING btree (alm, id DESC NULLS LAST); COMMENT ON INDEX public.mov_id IS 'Próximo ID del movimiento de almacén'; CREATE INDEX mov_time ON public.mov_inventario USING btree (date_add DESC NULLS LAST); COMMENT ON INDEX public.mov_time IS 'Fecha de creación del movimiento (para la ordenación)'; CREATE INDEX ord_min_estado ON public.ordenes_minado USING btree (estado); COMMENT ON INDEX public.ord_min_estado IS 'Estado de la orden de minado'; CREATE UNIQUE INDEX ord_min_id ON public.ordenes_minado USING btree (id DESC NULLS LAST); COMMENT ON INDEX public.ord_min_id IS 'Último ID de la orden de minado'; CREATE INDEX ord_min_inv_art_cant ON public.ord_min_inventario USING btree (art, cant DESC NULLS LAST); COMMENT ON INDEX public.ord_min_inv_art_cant IS 'Artículo y cantidad de los slots a acumular de la orden de minado. Usado para generar los stacks.'; CREATE UNIQUE INDEX ord_min_inv_id ON public.ord_min_inventario USING btree (ord_min, id DESC NULLS LAST); COMMENT ON INDEX public.ord_min_inv_id IS 'Próximo ID de la orden de minado'; CREATE INDEX ord_min_rob ON public.ordenes_minado USING btree (rob); COMMENT ON INDEX public.ord_min_rob IS 'Robot de la Orden de Minado'; CREATE INDEX redes_electricas_name ON public.redes_electricas USING gin (name public.gin_trgm_ops); COMMENT ON INDEX public.redes_electricas_name IS 'Nombre'; CREATE INDEX rob_gps_rob ON public.rob_gps USING btree (rob); COMMENT ON INDEX public.rob_gps_rob IS 'Robot GPS - Robot'; CREATE UNIQUE INDEX rob_gps_rob_tim ON public.rob_gps USING btree (rob, id DESC NULLS LAST); COMMENT ON INDEX public.rob_gps_rob_tim IS 'Robot y Tiempo del log (mostrar en la pantalla del robot)'; CREATE INDEX rob_gps_tim ON public.rob_gps USING btree (id DESC NULLS LAST); COMMENT ON INDEX public.rob_gps_tim IS 'Tiempo descendente mostrar en robots'; CREATE UNIQUE INDEX rob_inv_rob_num_slot ON public.rob_inventario USING btree (rob, num_slot); COMMENT ON INDEX public.rob_inv_rob_num_slot IS 'Robot Inventario: Robot y número de slot'; CREATE INDEX rob_inventario_articulo ON public.rob_inventario USING btree (art); COMMENT ON INDEX public.rob_inventario_articulo IS 'Maestros artículo del inventario'; CREATE UNIQUE INDEX rob_log_id ON public.rob_logs USING btree (rob, id DESC NULLS LAST); COMMENT ON INDEX public.rob_log_id IS 'Últimos IDs del histórico del robot (para Sub-Maestro)'; CREATE UNIQUE INDEX server_uuid ON public.servers USING btree (uuid); COMMENT ON INDEX public.server_uuid IS 'UUID'; CREATE INDEX usuarios_name ON public.usuarios USING gin (name public.gin_trgm_ops); COMMENT ON INDEX public.usuarios_name IS 'Nombre'; CREATE UNIQUE INDEX usuarios_name_uniq ON public.usuarios USING btree (name DESC NULLS LAST); CREATE INDEX usuarios_off ON public.usuarios USING btree (off DESC NULLS LAST); COMMENT ON INDEX public.usuarios_off IS 'Usuarios desactivado'; CREATE UNIQUE INDEX uuid ON public.robots USING btree (uuid) WHERE ((uuid)::text <> ''::text); COMMENT ON INDEX public.uuid IS 'UUID'; CREATE UNIQUE INDEX uuid_bat ON public.bat USING btree (uuid); COMMENT ON INDEX public.uuid_bat IS 'Identificador único del controlador'; CREATE UNIQUE INDEX uuid_drn ON public.drones USING btree (uuid) WHERE ((uuid)::text <> ''::text); COMMENT ON INDEX public.uuid_drn IS 'UUID'; CREATE TRIGGER act_robot_inv_actualizar BEFORE UPDATE ON public.rob_inventario FOR EACH ROW EXECUTE FUNCTION public.act_robot_inv_actualizar(); CREATE TRIGGER act_robot_inv_insertar BEFORE INSERT ON public.rob_inventario FOR EACH ROW EXECUTE FUNCTION public.act_robot_inv_insertar(); CREATE TRIGGER alt_drone_gen_drn_inv AFTER INSERT ON public.drones FOR EACH ROW EXECUTE FUNCTION public.alt_drone_gen_drn_inv(); CREATE TRIGGER alt_robot_gen_rob_inv AFTER INSERT ON public.robots FOR EACH ROW EXECUTE FUNCTION public.alt_robot_gen_rob_inv(); CREATE TRIGGER alt_robot_next_id BEFORE INSERT ON public.robots FOR EACH ROW EXECUTE FUNCTION public.alt_robot_next_id(); CREATE TRIGGER drone_post_update AFTER UPDATE ON public.drones FOR EACH ROW EXECUTE FUNCTION public.drone_post_update(); CREATE TRIGGER mod_drone_gen_drn_inv AFTER UPDATE ON public.drones FOR EACH ROW EXECUTE FUNCTION public.mod_drone_gen_drn_inv(); CREATE TRIGGER mod_robot_gen_rob_inv AFTER UPDATE ON public.robots FOR EACH ROW EXECUTE FUNCTION public.mod_robot_gen_rob_inv(); CREATE TRIGGER robot_post_update AFTER UPDATE ON public.robots FOR EACH ROW EXECUTE FUNCTION public.robot_post_update(); CREATE TRIGGER set_alm_inventario_id BEFORE INSERT ON public.alm_inventario FOR EACH ROW EXECUTE FUNCTION public.set_alm_inventario_id(); CREATE TRIGGER set_almacenes_id BEFORE INSERT ON public.almacenes FOR EACH ROW EXECUTE FUNCTION public.set_almacenes_id(); CREATE TRIGGER set_api_key_id BEFORE INSERT ON public.api_key FOR EACH ROW EXECUTE FUNCTION public.set_api_key_id(); CREATE TRIGGER set_articulos_id BEFORE INSERT ON public.articulos FOR EACH ROW EXECUTE FUNCTION public.set_articulos_id(); CREATE TRIGGER set_bat_hist_id BEFORE INSERT ON public.bat_historial FOR EACH ROW EXECUTE FUNCTION public.set_bat_hist_id(); COMMENT ON TRIGGER set_bat_hist_id ON public.bat_historial IS 'Asignar el nuevo ID de la tabla sub-maestra '; CREATE TRIGGER set_bat_id BEFORE INSERT ON public.bat FOR EACH ROW EXECUTE FUNCTION public.set_bat_id(); CREATE TRIGGER set_config_id BEFORE INSERT ON public.config FOR EACH ROW EXECUTE FUNCTION public.set_config_id(); CREATE TRIGGER set_drn_inventario_id BEFORE INSERT ON public.drn_inventario FOR EACH ROW EXECUTE FUNCTION public.set_drn_inventario_id(); CREATE TRIGGER set_drones_id BEFORE INSERT ON public.drones FOR EACH ROW EXECUTE FUNCTION public.set_drones_id(); CREATE TRIGGER set_gen_id BEFORE INSERT ON public.gen FOR EACH ROW EXECUTE FUNCTION public.set_gen_id(); CREATE TRIGGER set_mov_inventario_id BEFORE INSERT ON public.mov_inventario FOR EACH ROW EXECUTE FUNCTION public.set_mov_inventario_id(); CREATE TRIGGER set_ord_min_inventario_id BEFORE INSERT ON public.ord_min_inventario FOR EACH ROW EXECUTE FUNCTION public.set_ord_min_inventario_id(); CREATE TRIGGER set_ordenes_minado_id BEFORE INSERT ON public.ordenes_minado FOR EACH ROW EXECUTE FUNCTION public.set_ordenes_minado_id(); CREATE TRIGGER set_redes_electricas_id BEFORE INSERT ON public.redes_electricas FOR EACH ROW EXECUTE FUNCTION public.set_redes_electricas_id(); CREATE TRIGGER set_usuarios_id BEFORE INSERT ON public.usuarios FOR EACH ROW EXECUTE FUNCTION public.set_usuarios_id(); ALTER TABLE ONLY public.alm_inventario ADD CONSTRAINT alm_alm_inventario FOREIGN KEY (alm) REFERENCES public.almacenes(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.alm_inventario ADD CONSTRAINT art_alm_inventario FOREIGN KEY (art) REFERENCES public.articulos(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.rob_inventario ADD CONSTRAINT articulo_rob_inventario FOREIGN KEY (art) REFERENCES public.articulos(id) ON UPDATE CASCADE ON DELETE RESTRICT; ALTER TABLE ONLY public.bat_historial ADD CONSTRAINT bat_historial_bat FOREIGN KEY (bat, red_ele) REFERENCES public.bat(id, red_ele) NOT VALID; ALTER TABLE ONLY public.bat_historial ADD CONSTRAINT bat_historial_red_ele FOREIGN KEY (red_ele) REFERENCES public.redes_electricas(id) NOT VALID; ALTER TABLE ONLY public.drn_gps ADD CONSTRAINT drn_gps_drone FOREIGN KEY (drn) REFERENCES public.drones(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; COMMENT ON CONSTRAINT drn_gps_drone ON public.drn_gps IS 'Drone'; ALTER TABLE ONLY public.drn_inventario ADD CONSTRAINT drn_inventario_drones FOREIGN KEY (drn) REFERENCES public.drones(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; COMMENT ON CONSTRAINT drn_inventario_drones ON public.drn_inventario IS 'Drone'; ALTER TABLE ONLY public.drn_logs ADD CONSTRAINT drn_log_drones FOREIGN KEY (drn) REFERENCES public.drones(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; COMMENT ON CONSTRAINT drn_log_drones ON public.drn_logs IS 'Drone'; ALTER TABLE ONLY public.mapa ADD CONSTRAINT geo_art FOREIGN KEY (art) REFERENCES public.articulos(id) ON UPDATE CASCADE ON DELETE SET NULL NOT VALID; ALTER TABLE ONLY public.mov_inventario ADD CONSTRAINT mov_inv_alm FOREIGN KEY (alm) REFERENCES public.almacenes(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.mov_inventario ADD CONSTRAINT mov_inv_art FOREIGN KEY (art) REFERENCES public.articulos(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID; ALTER TABLE ONLY public.ord_min_inventario ADD CONSTRAINT ord_min_inventario_art FOREIGN KEY (art) REFERENCES public.articulos(id) NOT VALID; ALTER TABLE ONLY public.ord_min_inventario ADD CONSTRAINT ord_min_inventario_ord_min FOREIGN KEY (ord_min) REFERENCES public.ordenes_minado(id) NOT VALID; ALTER TABLE ONLY public.bat ADD CONSTRAINT red_ele_bat FOREIGN KEY (red_ele) REFERENCES public.redes_electricas(id) ON UPDATE CASCADE ON DELETE RESTRICT; COMMENT ON CONSTRAINT red_ele_bat ON public.bat IS 'Red eléctrica batería'; ALTER TABLE ONLY public.gen ADD CONSTRAINT red_ele_gen FOREIGN KEY (red_ele) REFERENCES public.redes_electricas(id) ON UPDATE CASCADE ON DELETE RESTRICT; COMMENT ON CONSTRAINT red_ele_gen ON public.gen IS 'Red eléctrica generador'; ALTER TABLE ONLY public.ordenes_minado ADD CONSTRAINT rob FOREIGN KEY (rob) REFERENCES public.robots(id) NOT VALID; COMMENT ON CONSTRAINT rob ON public.ordenes_minado IS 'Robot'; ALTER TABLE ONLY public.robots ADD CONSTRAINT rob_ord_min FOREIGN KEY (ord_min) REFERENCES public.ordenes_minado(id) NOT VALID; COMMENT ON CONSTRAINT rob_ord_min ON public.robots IS 'Orden de minado del robot'; ALTER TABLE ONLY public.rob_gps ADD CONSTRAINT robot_rob_gps FOREIGN KEY (rob) REFERENCES public.robots(id) ON UPDATE CASCADE ON DELETE CASCADE; ALTER TABLE ONLY public.rob_inventario ADD CONSTRAINT robot_rob_inventario FOREIGN KEY (rob) REFERENCES public.robots(id) ON UPDATE CASCADE ON DELETE CASCADE; ALTER TABLE ONLY public.rob_logs ADD CONSTRAINT robot_rob_logs FOREIGN KEY (rob) REFERENCES public.robots(id) ON UPDATE CASCADE ON DELETE CASCADE; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.alm_inventario TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.almacenes TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.api_key TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.articulos TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.bat TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.bat_historial TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.config TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.drn_gps TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.drn_inventario TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.drn_logs TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.drones TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gen TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mov_inventario TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.ord_min_inventario TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.ordenes_minado TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.redes_electricas TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.rob_gps TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.rob_inventario TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.rob_logs TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.robots TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.servers TO erpcraft; GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.usuarios TO erpcraft;